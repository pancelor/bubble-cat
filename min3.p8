pico-8 cartridge // http://www.pico-8.com
version 33
__lua__
--[[
# printh.lua

print-debugging tools
]]

-- quotes and returns its arguments
-- usage:
--  ?qq("p.x=",x,"p.y=",y)
function qq(...)
 local args=pack(...)
 local s=""
 for i=1,args.n do
  s..=qt(args[i]).." "
 end
 return s
end
function pq(...)
 printh(qq(...))
end

-- sorta like sprintf (from c)
-- usage:
--  ?qf("p={x=%,y=%}",p.x,p.y)
function qf(...)
 local args=pack(...)
 local fstr=args[1]
 local argi=2
 local s=""
 for i=1,#fstr do
  local c=sub(fstr,i,i)
  if c=="%" then
   s..=qt(args[argi])
   argi+=1
  else
   s..=c
  end
 end
 return s
end
function pqf(...)
 printh(qf(...))
end

-- quotes an array
--  (its annoying sometimes that qq returns {1=foo,2=bar}
--  when you want {foo,bar} instead)
function qa(t)
 local s="{"
 for v in all(t) do
  s..=qt(v)..","
 end
 return s.."}"
end
function pqx(v)
 pq(v,tohex(v))
end
function pqa(arr)
 printh(qa(arr))
end

-- usage:
--  tap("rect_collide")
-- will show all args to/results from rect_collide
function tap(fname, obj,drop_self)
 local obj=obj or _env
 local original=obj[fname]
 assert(type(fname)=="string","use tap(\"foo\") not tap(foo)")
 assert(type(original)=="function",type(original))
 obj[fname]=function(self,...)
  pq("->",fname,drop_self and "<self>" or self,...)
  local ret=original(self,...)
  pq("<-",fname,ret)
  return ret
 end
end

--[[
# implementation details
]]

-- quote a single argument
-- like tostr, but works on tables
function qt(t,sep)
 if type(t)~="table" then return tostr(t) end

 local s="{"
 for k,v in pairs(t) do
  s..=(type(k)=="table" and k.base and "<"..k.base.name..">") or tostr(k)
  if k=="base" then
   s..="=<"..tostr(v and v.name)..">"
  else
   s..="="..qt(v)
  end
  s..=sep or ","
 end
 return s.."}"
end

-->8
--[[
# helper.lua

various useful functions
]]

--[[
# misc
]]

-- needs to be defined first
function arr0(zero,arr)
 arr[0]=zero
 return arr
end

dirx=arr0(-1,split"1,0,0,1,1,-1,-1")
diry=arr0(0,split"0,-1,1,-1,1,1,-1")

-- usage:
--  bkg=memoize(function(x,y) return hrnd(seed,x,y)&0x0.ffff end,
--              function(x,y) return x+(y>>16) end))
-- todo: can i do what keyer does, but more convenient somehow?
-- ◆⧗ this adds a decent bit of perf overhead; consider inlining
function memoize(f, keyer)
 keyer=keyer or f_id
 local _cache={}
 return function(...)
  local args={...}
  local key=keyer(unpack(args))
  local val=_cache[key]
  if not val then
   val=f(unpack(args))
   _cache[key]=val
  end
  return val
 end
end

function rect_collide(x0,y0,w0,h0,x2,y2, w2,h2)
 return x2<x0+w0
    and y2<y0+h0
    and x0<x2+(w2 or 1)
    and y0<y2+(h2 or 1)
end

function offscreen(x,y)
 return not rect_collide(%0x5f28,%0x5f2a,128,128,x,y)
end

-- -- given a screenpos, return a worldpos
-- function ppi(x,y)
--  return (x+%0x5f28)\8,(y+%0x5f2a)\8
-- end

function inbounds(x,y)
 return 0<=x and x<worldw
    and 0<=y and y<worldh
end

function sum(arr)
 local res=0
 for v in all(arr) do
  res+=v
 end
 return res
end

-- returns a number that goes from 0 to 1 in period seconds
--  (never quite hits 1, actually)
function cycle(period)
 return time()%period/period
end

-- -- requires special arranging of the spritesheet
-- function autotile(mx,my, t)
--  t=t or mget(mx,my)
--  for i=0,3 do
--   local solid_neighbor=fget(mget(mx+dirx[i],my+diry[i]),0)
--   t+=boolint(solid_neighbor)<<i
--  end
--  return t
-- end

--[[
# strings
]]

hex=arr0("0",split("123456789abcdef","",false))
-- assert(hex[3]=="3")
-- assert(hex[13]=="d")

-- recommended range:
--  space (start=32)
--  this gets ~95 bytes of space until past tilde (ord=126)
--  (these chars are all 1 byte
--  on twitter, and are just generally the
--  good ascii printable block)
-- for full ascii 0-255 range, see
--  extra special cases here:
--  https://www.lexaloffle.com/bbs/?tid=38692
function pack_bytes(arr, start,last)
 start=start or 0
 last=last or 255
 local out=""
 for i=1,#arr do
  local c=arr[i]+start
  assert(c<=last)
  out..=c=="\"" and "\\\""
     or c=="\\" and "\\\\"
     or chr(c)
 end
 return out
end

-- usage:
--  print(center("hello❎❎❎❎❎❎",64,64,8))
function center(str,x,...)
 local w=print(str,0,0x4000)
 return str,x-w\2,...
end

-- i is an in-between-chars pointer
-- this is not the same sort of
-- number sub() uses
function splice(str,i,n, new)
 return sub(str,1,i)..(new or "")..sub(str,i+n+1)
end
--assert(splice("hello",0,1,"b")=="bello")
--assert(splice("hello",1,1)=="hllo")
--assert(splice("hello",4,1,"b")=="hellb")
--assert(splice("hello",2,3,"at")=="heat")

-- substring starting at i of length n
function ssub(str,i, n)
 return sub(str,i,i+(n or 1)-1)
end

function oprint(msg,x,y, cfront,cback)
 print(msg,x+1,y+1,cback or 0)
 print(msg,x,y,cfront or 7)
end

function oprint8(msg,x,y,cfront,cback)
 for i=0,7 do
  print(msg,x+dirx[i],y+diry[i],cback)
 end
 print(msg,x,y,cfront)
end

function ospr8(s,x,y, c)
 local paldata=pack(peek(0x5f00,16))
 for i=0,15 do
  pal(i,c or 0)
 end
 for i=0,7 do
  spr5(s,x+dirx[i],y+diry[i])
 end
 poke(0x5f00,unpack(paldata))
 spr5(s,x,y)
end

function sprxy(s,...)
 return s%16*8,s\16*8,...
end

function tohex(x)
 return tostr(x,1)
end

function tobin(x, friendly)
 local s="0b"
 for i=15,-16,-1 do
  s..=(x>>i)&1
  if i==0 then
   s..=friendly and "\n ." or "."
  elseif i%4==0 then
   s..=friendly and " " or ""
  end
 end
 return s
end

function leftpad(s,n, ch)
 ch=ch or "0"
 s=tostr(s)
 while #s<n do
  s=ch..s
 end
 return s
end

--[[
#  overrides / pico-8 things
]]

function _rectbounds(x,y,w,h,...)
 return x,y,x+max(0,w-1),y+max(0,h-1),...
end
function rectfillwh(...)
 rectfill(_rectbounds(...))
end
function rectwh(...)
 rect(_rectbounds(...))
end

function rectfillborder(x,y,w,h,b,cborder,cmain)
 if b<0 then
  b*=-1
  x-=b    y-=b
  w+=b*2  h+=b*2
 end
 rectfillwh(x,y,w,h,cborder)
 rectfillwh(x+b,y+b,w-b*2,h-b*2,cmain)
end

-- e.g. enum"foo,bar,baz" sets
-- foo=1,bar=2,baz=3 (globally!)
-- returns a index/lookup table
function enum(str)
 local index={}
 for i,name in ipairs(split(str,"\n")) do
  _env[name]=i
  index[i]=name
 end
 return index
end

function nocam(f)
 return function(...)
  local cx,cy=camera()
  f(...)
  camera(cx,cy)
 end
end

function lowpass(enable)
 -- set lowpass filter on music
 -- useful for pause menus
 poke(0x5f43,enable and 0b1111 or 0)
end

_last_ust_time=-1
function upd_screenshot_title()
 local function f(s,n)
  return leftpad(stat(s),n)
 end
 if time()-_last_ust_time>=1 then
  _last_ust_time=time()
  extcmd("set_filename",qf("%_%_%_%t%_%_%",
   "tunaquest",
   f(90,4),f(91,2),f(92,2),
   f(93,2),f(94,2),f(95,2)
  ))
 end
end

-- see tech/gpio.p8; requires custom html plate
function open_external(url)
 for i=1,#url do
  poke(0x5f80+i,ord(url,i))
 end
 poke(0x5f80,1) --done
end

--[[
# functionalish stuff
]]

f_id=function(x) return x end
noop=function() end

function curry(f,...)
 local args0={...}
 return function(...)
  return f(unpack(concat(args0,{...})))
 end
end

function fmap(table,f)
 local res={}
 for i,v in pairs(table) do
  res[i]=f(v)
 end
 return res
end

-- arr could be a general table here
function filter(arr,f)
 local res={}
 for i,v in pairs(arr) do
  if (f(v)) add(res,v) 
 end
 return res
end

function _func_or_elem_finder(f)
 return type(f)=="function"
  and f
  or function(x) return x==f end
end

function fall(table,f)
 f=_func_or_elem_finder(f)
 for v in all(table) do
  if (not f(v)) return 
 end
 return true
end

function fany(table,f)
 f=_func_or_elem_finder(f)
 for v in all(table) do
  if (f(v)) return true
 end
 -- return nil
end

function find(arr,f)
 f=_func_or_elem_finder(f)
 for i,v in ipairs(arr) do
  if (f(v)) return v,i
 end
-- return nil,nil
end

--[[
# table/array utils
]]

includes=fany

function back(arr,n)
 return arr[#arr-(n or 1)+1]
end

-- concat two arrays together
function concat(...) 
 local t={}
 local args={...}
 for table in all(args) do
  for val in all(table) do
   add(t,val)
  end
 end
 return t
end

function merge_into(obj,...)
 -- careful that both inputs
 --  are either shallow or
 --  single-use!
 -- e.g. def={x={0}} is
 --  a bad idea because
 --  merge(def,{}).x[1]=1 will
 --  modify def.x too!
 for t in all{...} do
  for k,v in pairs(t) do
   obj[k]=v
  end
 end
 return obj
end
function merge(...)
 return merge_into({},...)
end

clone=merge

function parse_into(obj,str, mapper)
 for str2 in all(split(str)) do
  local parts=split(str2,"=")
  assert(#parts==2)
  local k,v=unpack(parts)
  obj[k]=mapper and mapper(k,v) or v
 end
 return obj
end
function parse(...)
 return parse_into({},...)
end

function sort(arr,f)
 f=f or f_id
 for i=1,#arr do
  for j=i+1,#arr do
   if f(arr[j])<f(arr[i]) then
    arr[i],arr[j]=arr[j],arr[i]
   end
  end
 end
end

-->8
--[[
# math.lua

various pure math stuff
]]

function approach(x,target,delta)
 delta=delta or 1
 return x<target and min(x+delta,target) or max(x-delta,target)
end

function lerp(a,b,t) return a+(b-a)*t end
-- returns t such that x=lerp(a,b,t)
function ilerp(a,b,x) return (x-a)/(b-a) end

function clerp(a,b,t) return mid(a,b,a+(b-a)*t) end
function iclerp(a,b,x) return mid(1,(x-a)/(b-a)) end

function ease_exp(t)
 return 2^(-10*t)
end

function ease_back(t)
-- return (1+c1)*t^3-c1*t^2
 return (t+1.70158*(t-1))*t^2
end

-- pythag but mostly safe from 16-bit overflow
function dist(dx,dy)
 local b=max(abs(dx),abs(dy))
 local a=min(abs(dx),abs(dy))/b
 return b*sqrt(a^2+1)
end

function sgn0(x)
 return x==0 and 0 or sgn(x)
end

function align(n,a)
 -- assert a is a power of 2
 -- assert n is an integer
 return n&~(a-1)
end
--assert(align(0,4)==0)
--assert(align(1,4)==0)
--assert(align(2,4)==0)
--assert(align(3,4)==0)
--assert(align(4,4)==4)
--assert(align(13,1)==13)
--assert(align(13,2)==12)
--assert(align(13,4)==12)
--assert(align(13,8)==8)
--assert(align(13,16)==0)

function xor(a,b)
 return (a or b) and not (a and b)
end

function round(x)
 return (x+0.5)\1
end

function divmod(x,y)
 return x\y,x%y
end

-->8
#include min3.lua
__gfx__
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00700700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00077000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00077000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00700700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__label__
c0ddcdcadcdd0babb3a30000d0ccbcdcd3a3bdcbdc03c3acbac0ac0dadcdbcbbcddb0abbcaddaabadccaadc0ba3c3cdb0a3a3dbdadd0bd0cdb0cbdbda0dcd0a0
3cacb3c33b33c3cbdcdbbccabac3b33b3cb303d3d3bb3033d3cdc3b303b3da3b33b3dcdccbc3b3addcb3b3bbcdabc3c3dadabbcdbcb0cd0ba3b3b3c33a3acd0b
33a3b33a3303a3c33c3c3a33a3303a3c33030d3033c33a33033b33a3b03033030303303b3d3aa3b3a0a3a3d3b33a33a33d33c33c30b3a3a303ad30303d33c33b
33d0c3033033b33033033b33d330330303033b3030303a33c30b3033b330330303c330303c33a330330303a3303303303303303d3b3303d3b33b303c3a303030
33d330330330330330303033c330330303b330330330330303d33033b3303303c3b3303a0303303303b0c3a3303303303b0030330300c303a3033b3303030333
33b30303030303303a303a30303030030303030c30303033c330303030303003b300303303003033033a33b3303003033c303030030303d33030303303003033
0330330303d3303303003030303303303303303303303003a330330330300303303a3c30303030300303303303030303033a3000303030330300303003030033
33303303303030303030303303003033033033030030303033033033033033033033030030303030303030300303030303033a30003033030003030303303303
33303303303030330330330303033033030303003030303003033033033033033030030330303030303303303303003033033030303003030303030303030303
3303030303003033033d3303303030330303030303303a0030303033033030d30303030003033030303303030303033033033030303303030330330330303033
33303303030330330303030030330330330330330330303030030330303030030303030303003033030303003033033033030030303030303303303303303033
30303303000303303003033030030330330300303030300030300303303030330303030303030330330303030303030330330330330300303303303303303303
30003033030303303303303030330330330303030030303033030003033033033033033033030303303303030303033033033033030303303030303030030300
30300303030300303303303303030330330330300303303303030303033033033033030030300303303030330330330330303030030330303033033030303303
30330330330300303303303003030303030330303033033033033033033033033030303000303303303030330330330300303030330330330330330330330333
30303030330330303030303003033030030330303030303303030330300303303303303030300303303303003030030300303003030030330303030303030333
33033030030330330330330303030030300303303030303030030303030303303003033030030300303303303003030303003033033030303003030030330333
33033033030030330330300303030330300303303030303033030030300303003033033030030330300003033033033033030303030330303033033033033033
33033030303303303303303303303030330330330330303033033030303003030030303030030300303003033033033033030003030303303030300303303033
30330300303030330300303303303303303030330330303030030330303033030030330330330300303303030303033033030303000303030300303303303303
30303030300030303033030303303303303030300303303030330330300303303303303003033033033030030303033033030303030330330330330330303030
30303030303000303003033033030303030330300303003030003030030330330300303003030030303033030303303303303303030330300303003033033030
30303030300030330303033033030030330300303303303030300030330330330330300303030330300030330303030303303003030030303033030030330333
33303030303030303303003030030330303030303003033030303030303030030300303303303303303030303033033030303303030300303030330330330333
30303030303030300303303303303303003033030030330330303030303030330300303003030303030330303033033033030303303303303003030030330333
33303303003033033033030003033033033033030030330330303030303003033030303003030303030330303030303303030330330330330330330330330333
33303030303033033033030303003030303030303030030330303030303303030300303303003033033030303030303033033033030030330330330303030303
30330300303003033030030303030030303030030330300303303303030303033033033033033030303030300030303030303303000303303003030303303303
33030303003030030330330303033030303030330330330300303303000303303303303303003030303030303033033033033033030303303303030300303033
33030030303030030330330303033033033030303003030030303033030303303030330300303000303030330303033033033033030003030303030330300033
33303030303030030330300303303030300303003033033033033030030303033030303303003030303030330303033033030303030303030303030330303033
33303030330303033033033030030300303303303030303033033033033033030303303303003030003033030003033033030303303303030300303030300303
30330303030303303303303303000303003033030303303303303030300303030300303003030030300303030303030303003030003030030330330330303030
33003030030300303303303303030303033033030303303303303030330330300303003033033030030303030303030330330300303030300303030300303030
33303030330330330330303033033033030303303303303303003030030330330303033030303000303303000303030330330300303030330303030030303030
33303030300303030330303033033033030303303303030330330330303030030303033033033030003033030303003033030030330300303003030030330330
30303030303303003030303303303030300303303303030330330330330303030303003030030330303033030303003030303030330330330303030030330330
30330330330330330300303303003030030303033033030303303030330330330330330330300303303003030303303003030030330303030303030330330330
30330330330330330330330303033030303030330330303030303303303030300303303003033033033030303303303303030330330300303303003033030033
30303003033033030303303303003033030030330330303030303303303030300303303303030330330300303303303003030303303303303030300303003033
30303033033033033030303303303303030330330330330303030303003030303030303033030030330330300303303303030330303030303000303003033033
30303033030303003033030303303003030030330330330303030303303000303030330303030030300303303303030330330330303030303030303033033033
03030030330330303033030303003033030030330303030003030303003030003033030303030330300303303303030300303303003030303000303303303033
03030300303000303003030030300030303033030303030303030303303030300303003033033033030030300303303030303033033030003030303003033033
03030300303030300030330330303030303003033033033033030303303030303033033033033030030330330330303030303030330300303303303030303033
03033030303303303000303030330300303003030030303030030330330300303030330330330330303030303030330330303030303303030303030030330333
03030330300303303030303033030030303033030030330330330300303303003030030303033030003033033033030030330300303303000303303303030333
03303030330300003030030303030303030303033030030330330303033033033030030300030300303303303003033030030330330303030303303003030303
03303030300303003030030303030303030330330330330303030003030030330300303303030300303303030330303030030303033030030330303033030303
03030330330303030303030330330303033030030330303033030303030330330330303033030303303303303303303030300303003033030030300303000303
03003033033033030303030330300303303030330330330300303003030303030330303030030303030030330330303030303303003030030330300303030330
33030030303030030303033030303303003030303303303303003030030330330330303033033033030030300303303030330300303303030330330330330330
33303303003033030303003033030003030303303303303303303030330330300303303003033030030330330330303030030303030303000303030330330330
30303003033030030300303303030300303303003033030303303030330330330300303003033030030300303030303033033033030303030303033030303030
33303303303030300303303303303303303303303003030303303030303030303030300303303030330300303030330330330330330303030303030300303033
30300303003030303303303303003033033030303303303303030330330330330303030030300030330330303030030300303000303303303303030303030033
03030303030030300303303303003033033030303003033030030303033030303303030330303030030330303033030003033030303003033033033030030333
03030303030330330303033033033030030330303030303003030003033030303003033033030030330330303033030303030330330303033030303303000303
03030303033030030330303030030330330330303033033030030303030030300303303030330330303033033033030303303303030303033033033033030303
33030330330330330330300030330330330300303303003033030303303000303303303000303030303030030330330330330330330330330303033033033030
33000303303303303000303003033030303303303303303030330300303030303033030030303030003030030300303003030000303030330330300030330330
33030303030303003030303030330330303030030330330300303030303033033033030303303030300303303303303303030300303030303030303030330330
33030303303003033030030330303033033030303030300303003033033033033033030030303033033033030030303033030030330330303033033033033030
33033033033030030300303303303030303033033030303303303030330330303033033030303303303003033033033030030330300303030330330330330330
33033030030300303303030330330300303303003030303003033033030030303033033030303030300303003033033033033030030330300303030330303030
30330330330330300303303303303303303030330330303033033033030030303033030303030330300303003033033030303003033030303003033033030030
30330330330330300303303303003033030030300303003030030330303030303003030303030330300303303000303303303030303030303030330303033030
33030303030330330330303030303003030303003030030330303030303030303033030303030330330303033030303303303030330330330330330300303033
33033033033033030303303030303033030303003033030030330330303030003033030003030030330303030303303303303303303303030330330303033033
30300030330330303030030303033033030303303303303030330330330330303033030303303003033033033033033033030303303303030330330303030033
30303030300303303030300303030300030303030030300030330303030030303030303303303303003033033033033030030300303003033033033033030303
33303303303303303030303033030003030303030330303033030003030303303030330330330303030030303033030303303030303033033033033030030300
33030303303003030030303030030300030330330300303003030303000303303000303303303303303030303030303303303030330303033030303003030303
33030303003030303030300303030303030303303303303303303303030303033030030303033030030330300030303033033033030030330330303030030300
30330330300303303030330303033030303003030303303030303030030303030030330303033033030030303030303003030030330330300303303030300303
30303303303303303030303033033030303003030303303030330330330300030303030003030030303030303030303030030300303030330330303030303303
30300303030300003033033033033030303030330303030030300303303303030303030303303030300030330300303003030030330300303303303003033030
33303030300303003033033033033030303030330303030030330300303303303003030030330330303030030330300303003033033030303303303303003030
33303303303003033033033033030303303303303003030030330330330330303033033033033030303303303003030303030303033030303303030303030030
33030300303303003030030330300303303003033033033030030330330300303030300303030300303303303003030030300303003030303303030330330330
33000303003033033030303003033033033033033033033033033030303303030303030003030030303030303030330300303303003033030303030330330333
33030303303003030030303033033033033030030303033033033033030003033030030303030303030300303030330303030003033033030030300303303303
30303033033030030330300303003030030330330330330300303030330300030330330303033033033030303303303003030303030303033033030303303303
30303003030030330300303303303003030303303303303303303030300303030330330300303303003033030303303030330330300303000303030300303303
30303033030030300303003030303303030303030030303030303303303303003033030030300303030330330303033030303303303303030303030030330333
30303033033030303303303030330303033033033033033033033033030303003033033030303303303030330303033033033030303303030300303030330333
30330330303030303003030030300303030330303033033033033030030300303303303303303003033033030303030303033030303303030330303030303033
30330330330330303030030300303003033030003033033030030303030303303303030330300303000030330330330303030030300030300303003033033033
30300303030330300303303303030300303030300303303003033033030030300303000303303003030030330330330300030330303030030330303033030033
33303303030300303303303030300303303030330330330303030030303030303303030330330303033033030030330303030303303030330330303033033033
33033030303003033033030030330330330303030030303030030330330330300303030330330303033033030030303033030303003030030300303000030333
33033030303003033030030303033030030303030303003030030330300303303303303000303030330330330300303303030303033033030303303030330333
33033030303030330303030303303030330330330303033030303303303303303003033030303030330330303030303003030303030303033033033033030303
30330300303030330330303030303303303303303303000303303303303303303003030030303033030030300303303003030030330303033033033030030333
33030300303303030330303030003033030303003033030003030303003033030303303030300030300303303303303030330300303303003030030330330333
33033030030330330330303030303030303033033033030303030330303033030303003030303030300303003030303030300303003033030303030303030303
33033033033033030303003030030330303033033033030303030330300303303003030030303030303003033033030030330300303303303303000303303303
33030303303303303003033030303003033033033030030303033033033033030303030330330330330300030303030030303033033033033033030303003030
33033030303303303030300303003030030330300030330303033033033033030030300303303303303003030030303030003033033033033030030300303030
33303303303303303003030003033033030303003030303303030330303030030300303303303030303033033030030330303033033033030303303030303030
33303303003033030030330303033033030303303030330300303303303303303303303303030300303303003030030300303303303003030303003033033030
30300303003033033030030303033030303303303303303303303003030303303003033030303303030303030303003030303303003030303303003033033030
33030303003033033030030300030300303003030303003033033033033030303003033030303303030300303303003033030303303030300303030330303030
33030330330330303030303003033033033033033033033033033030303303303303030330303033033030030330330330330330303030030303033030303030
33030300303303303303303003030030330303033030303003030303303303303003030030330330303030030330330303030303303303303003033030303030
33030030300303303303303303000303303303303303303303030303030303303303030330330330300030330303030003030303030303033033033030003033
30030300303003033033033033030303303303303303303303030300030300303303030330330300303030300303030300303303303003030030330300303033
33303303303303030303033030303303003033030303303303303303030330300303030300303303303303303003030303303303003033033033030303003033
30303033030303030330330300303003033033030030330300303030330330300303030303033030030330300030330300303003033033030030330300303033
03033030030300030330330303030030303033033030030303033030003030303003030303030330300303303030303033033030303003033033030303030333
03033033030303000303003033033033033033030303030330300030300030303033030303030330330300303003033033030030303030030303030303003033
03003033030303030303030030330330300303303303000303303030303030303030330330330303030030303033033033033030303303303030303033030033
03303303303003030030300303030330330300303303030330330303030030303033030303303303003030303303030300030330300303303303303303030333
03303003033033030303303303030303030030330330330330330303033030303030330330300303003030303303303003030303303303303303303303030333
03030030330330303033033033030303303003030303303303303303000303030300303030303033033030303030303033033033033030303030330303033033
33030330330330330303033033033033030030330330300303003030030303030303003033033030030330330330330300303003033030030330330303033033
33303303003030303303000303003030030330300303303303303030300303030303030303000303303303030300303303303303303303030330330303030303
33303303303000303303030303033030030330330300030303033030303030330330300303030330330303030303303003030303303003030303030303030303
33030303033030303303000303303030330330330303033030030303030030303030303030303030303303030300303303030330303033030303030303030033
33030303030330330303030303030330330330303033030030300303030303033030030330303030303303303303003033033030303303303303303003033033
33030303030303030330330303030030330330300303030330303033033033033030303303030303030303003030030330303033030303303303003030030333
33030330300303303030330303033033030030330303030030303033033030303303303303030303030303030330300303003033030003030030330300303303
33303303303303030303030303030330330330330300303030300030303033033030303003033030030330330330330330303030030303030303303303003030
33030303030303030303000303030300303303303303303000303030303033033033033033033030030330330330330330300030330330330303033033030030
30330303030303303303030330330330330303033033033030003030303303303303303303303030300303030330300303303030330330300303303003030030
30300303030303033033030030330330330300303003030030303030303003030303303303303303303303303030300303030330330330303033033033030030
03033033030303303030330330330303030303003033033033033030030303030030300303303003030303303030330303030303303030303033033030030330
03003030030300303030330330330303033033033033030303003030030303030303303303303303000303003030303003033033030303303000030330330330

